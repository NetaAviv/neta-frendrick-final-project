name: Test and Deploy Status Page

on:
  push:
    branches:
      - cleaning
  workflow_dispatch:

env:
  REPO_URI: 992382545251.dkr.ecr.us-east-1.amazonaws.com/neta-fred/final-project
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Get Latest Version Number
        id: get-version
        run: |
          echo "Fetching latest status-page image version from ECR..."
          
          LATEST_VERSION=$(aws ecr describe-images --repository-name neta-fred/final-project \
          --query 'imageDetails[*].imageTags' --output json | \
           jq -r 'flatten | select(.[] | test("^stuff-status-page-version-[0-9]+$"))' | \
           grep -o '[0-9]*' | sort -nr | head -n1)

          if [[ -z "$LATEST_VERSION" ]]; then
            echo "No previous versions found, starting from version-1"
            NEW_VERSION="version-1"
          else
            NEW_VERSION="version-$((LATEST_VERSION + 1))"
          fi

          echo "NEW_VERSION=$NEW_VERSION"
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Docker Compose and Build
        run: docker-compose -f stuff/compose.yaml build

      - name: Run Docker Containers with Compose
        run: docker-compose -f stuff/compose.yaml up -d

      - name: Wait for the App to Start
        run: sleep 120

      - name: Check Docker Containers
        run: docker ps -a

      - name: Check status-page logs
        run: docker logs status-page

      - name: Test Application with cURL
        run: |
          curl -fkL https://localhost:443 || exit 1  

      - name: Install PostgreSQL Client
        run: |
          sudo apt-get update
          sudo apt-get install -y postgresql-client

      - name: Test Connection to RDS PostgreSQL Instance
        run: |
          echo "Testing RDS PostgreSQL connection..."
          PSQL_TEST_COMMAND="PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h neta-fred-database.cx248m4we6k7.us-east-1.rds.amazonaws.com -U ${{ secrets.DB_USERNAME }} -d postgres -c 'SELECT 1;'"
          eval $PSQL_TEST_COMMAND
          
          if ! eval $PSQL_TEST_COMMAND; then
            echo "RDS PostgreSQL connection test failed."
            exit 1
          else
            echo "RDS PostgreSQL connection successful."
          fi

      - name: Install NFS Client
        run: |
          sudo apt-get update
          sudo apt-get install -y nfs-common

      - name: Create Mount Point for EFS
        run: |
          sudo mkdir -p /mnt/efs

      - name: Mount EFS
        run: |
          sudo mount -t nfs4 -o nfsvers=4.1,tcp,hard,timeo=600,retrans=2 fs-006310ee4adb8a079.efs.us-east-1.amazonaws.com:/ /mnt/efs

      - name: Copy stuff/opt to EFS
        run: |
          sudo cp -r stuff/opt/* /mnt/efs/

  push-to-ecr:
    needs: build-and-test
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build Docker Image
        run: docker-compose -f stuff/compose.yaml build status-page

      - name: Check $NEW_VERSION
        run: echo "NEW_VERSION=$NEW_VERSION"

      - name: View Docker Images
        run: docker images

      - name: Tag and Push Image to ECR
        run: |
            echo "Repo URI: $REPO_URI"
            echo "New Version: $NEW_VERSION"
            docker tag stuff-status-page:latest $REPO_URI:stuff-status-page-$NEW_VERSION
            docker push $REPO_URI:stuff-status-page-$NEW_VERSION

      - name: Stop and Remove Containers
        run: docker-compose -f stuff/compose.yaml down

      - name: Delete All Running Containers (Cleanup)
        run: |
          docker ps -q | xargs -r docker stop
          docker ps -aq | xargs -r docker rm
