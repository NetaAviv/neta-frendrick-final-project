name: Test and Deploy Status Page

on:
  push:
    branches:
      - test
  workflow_dispatch:

env:
  REPO_URI: 992382545251.dkr.ecr.us-east-1.amazonaws.com/neta-fred/final-project
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Debug AWS Credentials
        run: |
          echo "AWS_ACCESS_KEY_ID is set: ${{ secrets.AWS_ACCESS_KEY_ID }}"  # This will NOT expose the key
          echo "AWS_SECRET_ACCESS_KEY is set: ${{ secrets.AWS_SECRET_ACCESS_KEY }}"  # This will NOT expose the key

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Get Latest Version Number
        id: get-version
        run: |
          LATEST_VERSION=$(aws ecr describe-images --repository-name neta-fred/final-project \
            --query 'sort_by(imageDetails,& imagePushedAt)[-1].imageTags[0]' \
            --output text 2>/dev/null | grep -o 'version-[0-9]*' || echo "version-0")

          VERSION_NUMBER=$(echo $LATEST_VERSION | grep -o '[0-9]*' | awk '{print $1+1}')
          NEW_VERSION="version-$VERSION_NUMBER"

          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose

      - name: Set up Docker Compose and Build
        run: docker-compose -f stuff/compose.yaml build

      - name: Run Docker Containers with Compose
        run: docker-compose -f stuff/compose.yaml up -d

      - name: Wait for the App to Start
        run: sleep 120

      - name: Check Docker Containers
        run: docker ps -a

      - name: Check status-page logs
        run: docker logs status-page

      - name: Test Application with cURL
        run: |
          curl -fkL https://localhost:443 || exit 1  # Replace with actual EC2 IP and exposed port

      - name: Test RDS Connection
        run: |
          # Install MySQL client
          sudo apt-get update
          sudo apt-get install -y mysql-client

      - name: Test Connection to RDS Instance
        run: |
          MYSQL_TEST_COMMAND="mysql -h neta-fred-database.cx248m4we6k7.us-east-1.rds.amazonaws.com -u ${{ secrets.DB_USERNAME }} -p${{ secrets.DB_PASSWORD }} -e 'SELECT 1;'"
          echo "Testing RDS connection..."
          eval $MYSQL_TEST_COMMAND
          
          if ! $MYSQL_TEST_COMMAND; then
            echo "RDS connection test failed."
            exit 1
          else
            echo "RDS connection successful."
          fi

  push-to-ecr:
    needs: build-and-test
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        
      - name: Build Docker Image
        run: docker-compose -f stuff/compose.yaml build status-page

      - name: Check $NEW_VERSION
        run: echo $NEW_VERSION

      - name: View Images
        run: docker images

      - name: Build and Push stuff-status-page Image to ECR
        run: |
            echo "Repo URI: $REPO_URI"
            echo "New Version: $NEW_VERSION"
            docker tag stuff-status-page:latest $REPO_URI:stuff-status-page-$NEW_VERSION
            docker push $REPO_URI:stuff-status-page-$NEW_VERSION

      - name: Stop and Remove Containers
        run: docker-compose -f stuff/compose.yaml down

      - name: Delete All Running Containers (Cleanup)
        run: |
          docker ps -q | xargs -r docker stop
          docker ps -aq | xargs -r docker rm
