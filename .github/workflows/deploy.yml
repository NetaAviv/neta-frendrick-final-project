name: Test and Deploy Status Page

on:
  push:
    branches:
      - neta-test-this
  workflow_dispatch:

env:
  REPO_URI: 992382545251.dkr.ecr.us-east-1.amazonaws.com/neta-fred/final-project
  AWS_REGION: us-east-1

jobs:
  build-and-test:
    runs-on: self-hosted

    steps:
      - name: Fix File Permissions
        run: |
          sudo chown -R $USER:$USER $GITHUB_WORKSPACE
          sudo chmod -R u+w $GITHUB_WORKSPACE
      
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq nfs-common postgresql-client python3-venv python3-pip libpq-dev

      - name: Mount EFS
        run: |
          sudo mkdir -p /mnt/efs
          sudo mount -t nfs4 -o nfsvers=4.1,tcp,hard,timeo=600,retrans=2 fs-02bded1456fa64b56.efs.us-east-1.amazonaws.com:/ /mnt/efs

      - name: Copy files to EFS
        run: sudo cp -r stuff/* /mnt/efs/

      - name: Check File Structure
        run: ls -R stuff/opt/
      
      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
      
      - name: Set up Python Virtual Environment
        run: |
          python3 -m venv stuff/opt/status-page/venv
          source stuff/opt/status-page/venv/bin/activate
          pip install --upgrade pip
      
      - name: Install Python Dependencies
        run: |
          source stuff/opt/status-page/venv/bin/activate
          pip install -r stuff/opt/status-page/requirements.txt


      
      - name: Set up Docker Compose and Build
        run: docker-compose -f stuff/compose.yaml build
      
      - name: Run Docker Containers with Compose
        run: docker-compose -f stuff/compose.yaml up -d
      
      - name: Wait for the App to Start
        run: sleep 200
      
      - name: Check Docker Containers
        run: docker ps -a
      
      - name: Check status-page logs
        run: docker logs status-page

      - name: Run Migrations
        run: |
         source stuff/opt/status-page/venv/bin/activate
         python stuff/opt/status-page/statuspage/manage.py migrate
      
      - name: Test Application with cURL
        run: curl -fL http://localhost:8001 || exit 1
      
      - name: Test Connection to RDS PostgreSQL Instance
        run: |
          PSQL_TEST_COMMAND="PGPASSWORD=${{ secrets.DB_PASSWORD }} psql -h neta-fred-database.cx248m4we6k7.us-east-1.rds.amazonaws.com -U ${{ secrets.DB_USERNAME }} -d postgres -c 'SELECT 1;'"
          if ! eval $PSQL_TEST_COMMAND; then
            echo "RDS PostgreSQL connection test failed."
            exit 1
          else
            echo "RDS PostgreSQL connection successful."
          fi

  push-to-ecr:
    needs: build-and-test
    runs-on: self-hosted

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
      
      - name: Build Docker Image
        run: docker-compose -f stuff/compose.yaml build status-page
      
      - name: Get Latest Version Number
        id: get-version
        run: |
          LATEST_VERSION=$(aws ecr describe-images --repository-name neta-fred/final-project \
          --query 'imageDetails[*].imageTags' --output json | \
          jq -r 'flatten | select(.[] | test("^stuff-status-page-version-[0-9]+$"))' | \
          grep -o '[0-9]*' | sort -nr | head -n1)
          
          if [[ -z "$LATEST_VERSION" ]]; then
            NEW_VERSION="version-1"
          else
            NEW_VERSION="version-$((LATEST_VERSION + 1))"
          fi
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
      
      - name: Tag and Push Image to ECR
        run: |
          docker tag stuff-status-page:latest $REPO_URI:stuff-status-page-$NEW_VERSION
          docker push $REPO_URI:stuff-status-page-$NEW_VERSION
      
      - name: Stop and Remove Containers
        run: docker-compose -f stuff/compose.yaml down
      
      - name: Cleanup Running Containers
        run: |
          docker ps -q | xargs -r docker stop
          docker ps -aq | xargs -r docker rm
